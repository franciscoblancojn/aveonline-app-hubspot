## Body de ejemplo que se recibe en el api
```json
{
    "guia": "valor_de_guia",
    "pedido_id": "valor_de_pedido",
    "numeropedidoExterno": "valor_de_numeropedidoexterno",
    "estado_id": 123,
    "nombre_estado": "nombre_del_estado",
    "fechacreacion": "fecha_de_creacion",
    "tiponovedad": "responsable_de_solucion",
    "dataStandartLine": {
        "type": "pending",
        "firstName": "nombre_destinatario",
        "companyName": "nombre_empresa",
        "operatorName": "nombre_transportadora",
        "guideNumber": "valor_de_guia",
        "collectedValue": 50000,
        "companyPhoneNumber": "telefono_empresa",
        "guidePdf": null,
        "clientAddress": "direccion_destinatario",
        "clientPhoneNumber": "telefono_cliente",
        "clientCity": "ciudad_destinatario",
        "operatorLocationAddress": "direccion_destinatario",
        "freightValue": 10000,
        "bankName": null,
        "bankAccount": null,
        "bankAccountNumber": null,
        "aveNoveltyName": "nombre_estado_novedad",
        "agentId": 456,
        "noveltyResponsible": "encargado_de_solucion"
    }
}
```
-----------------------------------------------------------------------------------------
## Lógica para sabe que teléfonos se le enviara mensajes
Dependiendo de **noveltyResponsible**, se le enviara mensaje al cliente, company o ambos, y los campos de dirección y first_name tambien dependen de **noveltyResponsible**
```js
telefonos = []
if (body.noveltyResponsible === 1 || body.noveltyResponsible === 3) {
telefonos.push({
    tel: "+57" + dataStandartLine.companyPhoneNumber,
    first_name: dataStandartLine.companyName ?? "User",
    last_name: "",
    address: dataStandartLine.clientCity,
    address2: dataStandartLine.operatorLocationAddress,
});
}
if (body.noveltyResponsible === 2 || body.noveltyResponsible === 3) {
telefonos.push({
    tel:"+57" + dataStandartLine.clientPhoneNumber,
    first_name: dataStandartLine.firstName ?? "User",
    last_name: "",
    address: dataStandartLine.clientCity,
    address2: dataStandartLine.clientAddress,
});
}
```
-----------------------------------------------------------------------------------------
## Variables que se usan en la plantillas y su equivalente en el Body
```js
{
    tel:telefono.tel,
    tipo_pedido: body.dataStandartLine.type,
    tienda: body.dataStandartLine.companyName,
    transportadora: body.dataStandartLine.operatorName,
    guia: body.guia,
    telefono_del_comercio: body.dataStandartLine.companyPhoneNumber,
    url_pdf_guia: body.dataStandartLine.guidePdf,
    valor: body.dataStandartLine.collectedValue,
    direccion: telefono.address,
    destino: telefono.address2,
    novedad_homologada: body.dataStandartLine?.aveNoveltyName,
    productos: body.dataStandartLine?.products,
};
```
-----------------------------------------------------------------------------------------
## Lista de plantillas
las plantillas están clasificadas por tipo y por id
```json
{
    tradicional: {
        0: {
            id: 1742399439329,
            name: "ave_tradicional_guia_generada",
        },
        1: {
            id: 1742399439329,
            name: "ave_tradicional_guia_generada",
        },
        2: {
            id: 1742399439329,
            name: "ave_tradicional_guia_generada",
        },
        10003: {
            id: 1742326976324,
            name: "pedido_en_manos_de_trasportadora",
        },
        10005: {
            id: 1742323154201,
            name: "reparto_pedido",
        },
        12: {
            id: 1742334680842,
            name: "pedido_entregado_ave_tradicional",
        },
        10017: {
            id: 1742334680842,
            name: "pedido_entregado_ave_tradicional",
        },
    },
    crm: {
        2: {
            id: 1711404694846,
            name: "guia_pedido",
        },
        10003: {
            id: 1711404694846,
            name: "CRM_pedido_en_manos_trasportadora",
        },
        10005: {
            id: 1711450461431,
            name: "reparto_pedido",
        },
        12: {
            id: 1738236609877,
            name: "entregado_pedido",
        },
        10017: {
            id: 1738236609877,
            name: "entregado_pedido",
        },
    },
    novedades: {
        SC: {
            id: 1745084674287,
            name: "pedido_en_novedad_con_gestion",
        },
        CL: {
            id: 1745084674287,
            name: "pedido_en_novedad_con_gestion",
        },
        OP: {
            id: 1745083529015,
            name: "pedido_en_novedad_operativa_sin_gestion",
        },
    },
};
```
-----------------------------------------------------------------------------------------

## Como definir que tipo y plantilla enviar

con tipo sabes si es tradicional, crm o novedades
y con estado_id sabes que id de plantilla vas a usar
```js
estado_id = `${body?.estado_id ?? "-1"}`;
type = !body.pedido_id && !body.numeropedidoExterno ? "tradicional" : "crm";
if (estado_id == "16" || estado_id == "10006" || estado_id == "10007") {
    type = "novedades";
    estado_id = body?.tiponovedad ?? "-1";
}
```